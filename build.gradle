import net.darkhax.curseforgegradle.TaskPublishCurseForge

import java.text.SimpleDateFormat
import net.neoforged.gradle.dsl.common.runs.run.Run

plugins {
    id "maven-publish"
    id 'net.darkhax.curseforgegradle' version '1.1.16'
    id 'org.jetbrains.changelog' version '1.2.1'
    id "com.modrinth.minotaur" version "2.+"
    //id "org.jetbrains.kotlin.jvm" version "1.6.10"
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id "com.github.breadmoirai.github-release" version "2.5.2"
    id 'checkstyle'
    id 'java'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withSourcesJar()
}

wrapper {
    gradleVersion = '8.11'
    distributionType = Wrapper.DistributionType.BIN
}

def isSnapshotVersion = project.hasProperty('teamcityBuild')

version = "${mod_version}" + (isSnapshotVersion ? "-SNAPSHOT" : "")
group = 'de.srendi.advancedperipherals'

def static getenv(path = ".env") {
    def env = [:]

    def file = new File(path)
    if (file.exists()) {
        file.eachLine { line ->
            def (name, value) = line.tokenize("=")
            if (value != null) {
                env[name.trim()] = value.trim()
            }
        }
    }

    return env
}

def secretEnv = getenv()
def curseforgeKey = secretEnv["CURSEFORGE_KEY"] ?: System.getenv("CURSEFORGE_KEY") ?: ''
def modrinthKey = secretEnv["MODRINTH_KEY"] ?: System.getenv("MODRINTH_KEY")
def repositoryName = secretEnv["PUBLIC_REP_NAME"] ?: System.getenv("PUBLIC_REP_NAME")
def repositoryKey = secretEnv["PUBLIC_REP_KEY"] ?: System.getenv("PUBLIC_REP_KEY")
def githubKey = secretEnv["GITHUB_KEY"] ?: System.getenv("GITHUB_KEY")

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }
minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')

runs {
    // applies to all the run configs below
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client { run -> setupClientAcc(run) }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}
repositories {
    mavenCentral()
    maven {
        name = "Blamejared maven botania patchouli"
        url = 'https://maven.blamejared.com'
        content {
            includeGroup("vazkii.botania")
            includeGroup("vazkii.patchouli")
        }
    }
    maven {
        name = "Squiddev maven cct"
        url = 'https://squiddev.cc/maven/'
        content {
            includeGroup("cc.tweaked")
            includeModule("org.squiddev", "Cobalt")
        }
    }
    maven {
        name = "Theillusivec4 maven curios"
        url = "https://maven.theillusivec4.top/"
        content {
            includeGroup("top.theillusivec4.curios")
        }
    }
    maven {
        name = "LDT Team minecolonies"
        url = 'https://ldtteam.jfrog.io/ldtteam/modding'
        content {
            includeGroup "com.ldtteam"
        }
    }
    maven {
        name = "Modmaven Jei"
        url = 'https://modmaven.dev/'
        content {
            includeGroup("mezz.jei")
            includeGroup("appeng")
            includeGroup("mekanism")
        }
    }
    maven {
        name = "Create maven"
        url = "https://maven.tterrag.com/"
        content {
            includeGroup("com.simibubi.create")
            includeGroup("com.tterrag.registrate")
        }
    }
    maven {
        name = "SirEdvin's private repository"
        url = "https://repo.repsy.io/mvn/siredvin/default"
        content {
            includeGroup("site.siredvin.ttoolkit")
        }
    }
    maven {
        name = "Shedaniel cloth"
        url = "https://maven.shedaniel.me/"
        content {
            includeGroup("dev.architectury")
            includeGroup("me.shedaniel.cloth")
        }
    }
    maven {
        url = uri("https://maven.pkg.github.com/refinedmods/refinedstorage")
        credentials {
            username = "anything"
            password = "\u0067hp_oGjcDFCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX"
        }
        content {
            includeModule("com.refinedmods", "refinedstorage")
        }
    }
    maven {
        name = 'Kotlin for Forge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
        content {
            includeModule("thedarkcolour", "kotlinforforge")
        }
    }
    maven {
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations {
    implementationExtra
    testModImplementation.extendsFrom(implementation)
    testModImplementation.extendsFrom(testImplementation)
    runtimeClasspath.extendsFrom localRuntime

}

dependencies {
    // If some of the dependencies are not needed in the dev environment, you can comment the `runtimeOnly` line so it
    // will not be included in the client.

    // Minimal requirements
    compileOnly "org.jetbrains:annotations:${jb_annotations}"
    implementation "net.neoforged:neoforge:${neo_version}"
    implementation "cc.tweaked:cc-tweaked-${minecraft_version}-forge:${cc_version}"

    // Minimal requirements end

    // Extended requirements
    // We don't use the api since we need a specific class from mekanism
    compileOnly "mekanism:Mekanism:${mekanism_version}"
    runtimeOnly "mekanism:Mekanism:${mekanism_version}"

    // Applied Energistics 2
    runtimeOnly "appeng:appliedenergistics2-neoforge:${appliedenergistics_version}"
    compileOnly "appeng:appliedenergistics2-neoforge:${appliedenergistics_version}"

    // Applied Mekanistics
    runtimeOnly "curse.maven:applied-mekanistics-574300:${appliedmekanistics_version}"
    compileOnly "curse.maven:applied-mekanistics-574300:${appliedmekanistics_version}"

    // Curios
    runtimeOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}"
    compileOnly "top.theillusivec4.curios:curios-neoforge:${curios_version}:api"

    // Refined Storage
    compileOnly "curse.maven:refined-storage-243076:${refinedstorage_version}"
    // Comment this when you want to run runServer since refined storage is just annoying just like its API
    //runtimeOnly "curse.maven:refined-storage-243076:${refinedstorage_version}"

    // AE2 Things
    //compileOnly "curse.maven:ae2things-609977:${ae2things_version}-sources"
    //runtimeOnly "curse.maven:ae2things-609977:${ae2things_version}-sources"

    // AE2 Additions
    //compileOnly "curse.maven:ae-additions-493962:${ae2additions_version}"
    //runtimeOnly "curse.maven:ae-additions-493962:${ae2additions_version}"

    //implementation "thedarkcolour:kotlinforforge:${kotlinforforge_version}"

    // Botania
    //compileOnly "vazkii.botania:Botania:${botania_version}"
    //runtimeOnly "vazkii.botania:Botania:${botania_version}"

    // Minecolonies
    // Remove/Comment this section if you want to use runData.
    //runtimeOnly "com.ldtteam:minecolonies:${minecolonies_version}"
    //runtimeOnly "com.ldtteam:structurize:${structurize_version}"
    //runtimeOnly "com.ldtteam:domum_ornamentum:${domumornamentum_version}:universal"
    //runtimeOnly "com.ldtteam:blockui:${blockui_version}"

    //compileOnly "com.ldtteam:minecolonies:${minecolonies_version}"
    //compileOnly "com.ldtteam:structurize:${structurize_version}"
    //compileOnly "com.ldtteam:domum_ornamentum:${domumornamentum_version}:universal"
    //compileOnly "com.ldtteam:blockui:${blockui_version}"

    //Patchouli
    //runtimeOnly "vazkii.patchouli:Patchouli:${patchouli_version}-FORGE"

    // Create
    //compileOnly "com.simibubi.create:create-1.20.1:${create_version}:all"
    //runtimeOnly "com.simibubi.create:create-1.20.1:${create_version}:all"

    //Powah
    implementation "curse.maven:powah-633483:${powah_version}"
    implementation "me.shedaniel.cloth:cloth-config-forge:11.1.106"
    implementation "dev.architectury:architectury-forge:9.1.10"

    //Removed until fully ported
    //testImplementation "site.siredvin.ttoolkit:ttoolkit-${minecraft_version}:${ttoolkit_version}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${junit_version}"
    testImplementation "org.hamcrest:hamcrest:${hamcrest_version}"
    testImplementation "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinx_coroutines_version}"
    testModImplementation sourceSets.main.output

    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"
    // Testing stuff
    // JEI
    implementation "mezz.jei:jei-${jei_version}"

    // Create Crafts & Additions
    //compileOnly "curse.maven:createaddition-439890:${createadditions_version}"
    //runtimeOnly "curse.maven:createaddition-439890:${createadditions_version}"
}


changelog {
    version = "${project.version}"
    path = "${project.projectDir}/CHANGELOG.md"
    header = "[${minecraft_version}-${-> version.get()}] - ${new SimpleDateFormat("yyyy-MM-dd").format(new Date())}"
    //Valid patterns would be
    //1.16.5-1.1.1.1b
    //1.18-1.0r
    //1.19-1.0.0a
    headerParserRegex = ~/\d+(\.\d+){1,2}-\d+(\.\d+){1,3}\w/
    itemPrefix = "-"
    keepUnreleasedSection = true
    unreleasedTerm = "[Unreleased]"
    groups = []
}

afterEvaluate {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "2000"
    }
}

jar {
    manifest({
        attributes(["Specification-Title"     : "advancedperipherals",
                    "Specification-Vendor"    : "Srendi",
                    "Specification-Version"   : "${version}",
                    "Implementation-Title"    : "advancedperipherals",
                    "Implementation-Version"  : "${version}",
                    "Implementation-Vendor"   : "Srendi",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    })
    archiveFileName = "AdvancedPeripherals-${minecraft_version}-${mod_version}.jar"
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = false
    }
    // Checkstyle is compatible with the configuration cache, however we need to disable it to prevent a build issue with teamcity
    notCompatibleWithConfigurationCache()
    outputs.upToDateWhen { false }
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [minecraft_version         : minecraft_version,
                             neo_version               : neo_version,
                             loader_version            : loader_version,
                             mod_id                    : mod_id,
                             version                   : version,
                             cc_version                : cc_version,
                             curios_version            : curios_version,
                             minecolonies_version      : minecolonies_version,
                             appliedenergistics_version: appliedenergistics_version,
                             patchouli_version         : patchouli_version,
                             refinedstorage_version    : refinedstorage_version,
                             botania_version           : botania_version,
                             mekanism_version          : mekanism_version,
                             ae2things_version         : ae2things_version,
                             powah_version             : powah_version,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml']) {
        expand replaceProperties
    }
}

tasks.register('publishCurseForge', TaskPublishCurseForge, { task ->
    setGroup("publishing")
    setDescription("Upload Advanced Peripherals to CurseForge")

    // This token is used to authenticate with CurseForge. It should be handled
    // with the same level of care and security as your actual password. You
    // should never share your token with an untrusted source or publish it
    // publicly to GitHub or embed it within a project. The best practice is to
    // store this token in an environment variable or a build secret.
    apiToken = curseforgeKey

    // Tells CurseForgeGradle to publish the output of the jar task. This will
    // return a UploadArtifact object that can be used to further configure the
    // file.
    task.upload(431725, jar) { file ->
        try {
            file.changelog = "${project.changelog.get("${minecraft_version}-${project.version}").withHeader(false).toText()}"
            file.changelogType = "markdown"
        } catch (err) {
            System.out.println(err)
            file.changelog = ""
        }

        addOptional('applied-energistics-2', 'curios', 'mekanism', 'refined-storage')

        addRequirement('cc-tweaked')

        addModLoader("neoforge")

        releaseType = "${release_type}"
    }
})

githubRelease {
    releaseAssets = jar.archiveFile

    if (githubKey != null)
        token = githubKey
    owner = "IntelligenceModding"
    repo = "AdvancedPeripherals"
    tagName = "${minecraft_version}-${version}"
    releaseName = "${minecraft_version}-${version}"
    targetCommitish = "release/${minecraft_version}"
    generateReleaseNotes = true
    try {
        //body = "${project.changelog.get("${minecraft_version}-${version}").withHeader(false).toText()}"
    } catch (err) {
        System.out.println(err)
        //body = ""
    }
    draft = false
    prerelease = !release_type.equalsIgnoreCase("release")
}

modrinth {
    token = modrinthKey
    projectId = 'SOw6jD6x'
    versionNumber = "${minecraft_version}-${project.version}"
    versionName = "Advanced Peripherals ${minecraft_version} ${version}"
    versionType = release_type
    uploadFile = jar
    gameVersions = [minecraft_version]
    loaders = ["neoforge"]
    dependencies {
        required.project "cc-tweaked"
    }

    try {
        changelog = "${project.changelog.get("${minecraft_version}-${project.version}").withHeader(false).toText()}"
    } catch (err) {
        System.out.println(err)
        changelog = ""
    }
}

// Stolen from mekanism
static void setupClientAcc(Run run) {
    //The below if statements are to add args to your gradle.properties file in user home
    // (DO NOT add them directly to the gradle.properties file for this project)
    // Setting the below properties allows use of your normal Minecraft account in the
    // dev environment including having your skin load. Each property also has a comment
    // explaining what information to set the value to/format it expects
    // One thing to note is because of the caching that goes on, after changing these
    // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
    if (run.project.hasProperty('mc_uuid')) {
        //Your uuid without any dashes in the middle
        run.programArguments('--uuid', (String) run.project.property('mc_uuid'))
    }
    if (run.project.hasProperty('mc_username')) {
        //Your username/display name, this is the name that shows up in chat
        // Note: This is not your email, even if you have a Mojang account
        run.programArguments('--username', (String) run.project.property('mc_username'))
    }
    if (run.project.hasProperty('mc_accessToken')) {
        //Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
        run.programArguments('--accessToken', (String) run.project.property('mc_accessToken'))
    }
}

publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.from((SoftwareComponent) components.java)
            publication.groupId = project.group
            publication.version = isSnapshotVersion ? "${minecraft_version}-${version}-${project.teamcityBuild}" : "${minecraft_version}-${version}"
            publication.artifactId =  isSnapshotVersion ? "advancedperipherals-snapshots" : "advancedperipherals"
            publication.artifacts = [jar, sourcesJar]
            publication.pom {
                name.set("AdvancedPeripherals")
                packaging = 'jar'
                description.set('Advanced Peripherals provides multiple extensions for ComputerCraft in form of Peripherals, Pocket Upgrades, Turtles or new gear.\n' +
                        'It also integrates with multiple third party mods.')
                url.set('https://docs.intelligence-modding.de/')
                scm {
                    url.set('https://github.com/SirEndii/AdvancedPeripherals.git')
                }
                issueManagement {
                    system.set('github')
                    url.set('https://github.com/SirEndii/AdvancedPeripherals/issues')
                }
                licenses {
                    license {
                        name.set('Apache-2.0')
                        distribution.set('repo')
                    }
                }
                withXml {
                    NodeList dependencies = asNode().dependencies
                    NodeList allDeps = dependencies.'*'

                    allDeps.<Node> findAll() { Node el ->
                        el.artifactId.text() == 'forge' && el.groupId.text() == 'net.neoforged'
                    }.forEach() { Node el ->
                        el.parent().remove(el)
                    }
                    //remove ForgeGradle's mapped suffix from versions & set as optional so anyone else doesn't inherit them
                    allDeps.<Node> findAll() { Node el ->
                        el.version.text().contains('_mapped_')
                    }.each { Node el ->
                        el.version.each { Node version ->
                            def versionText = version.text()
                            version.setValue(versionText.substring(0, versionText.indexOf('_mapped_')))
                        }
                        el.appendNode('optional', true)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = "public"
            url = "https://mvn.intelligence-modding.de/Intelligence"
            credentials {
                username = repositoryName
                password = repositoryKey
            }
        }
    }
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}